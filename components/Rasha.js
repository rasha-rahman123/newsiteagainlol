// Auto-generated by https://github.com/react-spring/gltfjsx

import * as THREE from "three"
import React, { memo, useEffect, useMemo, useRef, useState } from "react"
import { useLoader, useFrame } from "react-three-fiber"
import GLTFLoader from 'three-gltf-loader';
import { getMouseDegrees } from "./utils"


function moveJoint(mouse, joint, degreeLimit = 30) {
  let degrees = getMouseDegrees(mouse.current.x, mouse.current.y, degreeLimit)
  joint.rotation.xD = THREE.MathUtils.lerp(joint.rotation.xD || -100, degrees.y, 1)
  joint.rotation.yD = THREE.MathUtils.lerp(joint.rotation.yD || 0, degrees.x, 0.1)
  joint.rotation.x = THREE.Math.degToRad(joint.rotation.xD)
  joint.rotation.y = THREE.Math.degToRad(joint.rotation.yD)
}




export const Model = ({ mouse,scroll, ...props }) => {

  const group = useRef()
  const { nodes, animations } = useLoader(GLTFLoader, "https://cors-anywhere.herokuapp.com/https://rashaportfolio-d78bb.web.app/Xbot.glb")

  const texture = useLoader(THREE.TextureLoader, "https://cors-anywhere.herokuapp.com/https://rashaportfolio-d78bb.web.app/stacy.png")

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())

  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = { idle: mixer.clipAction(animations[2], group.current) }
    actions.current.idle.play()
    
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [])


  useFrame((state, delta) => {
    mixer.update(delta)
    moveJoint(mouse, nodes.mixamorigSpine)
    moveJoint(mouse, nodes.mixamorigNeck)

  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group  rotation={[-Math.PI/8,0,0]} scale={[1.1,1.1,1.1]} position={[1,-100,19]}>
        <primitive object={nodes["mixamorigHips"]} />
        <skinnedMesh receiveShadow castShadow geometry={nodes["Beta_Surface"].geometry} skeleton={nodes["Beta_Joints"].skeleton}>
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
    </group>
  )
};

export function Loading() {
  return (
    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>
      <sphereGeometry attach="geometry" args={[1, 16, 16]} />
      <meshStandardMaterial
        attach="material"
        color="pink"
        transparent
        opacity={0.6}
        roughness={1}
        metalness={0}
      />
    </mesh>
  );
}

export default memo(Model);